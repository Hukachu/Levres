@model Levres.Models.KonfiguracijaViewModel

@{
    ViewData["Title"] = "CreateKonfiguracija";
}
<div class="w-100 text-center m-auto">
    <h1 class="archivo-h1 mt-2 fw-bold">Konfiguracija</h1>
    <h3 class="archivo-light">konfigurišite svoje novo auto</h3>
</div>
<form asp-action="CreateKonfiguracija" method="post" class="detail-cont col-md-10 m-auto">
    <div class="form-group">
        <label asp-for="model" class="control-label fs-4 mb-2">Model</label>
        <div id="model-container" class="options-container mb-2">
            @foreach (var modal in Enum.GetValues(typeof(Model)).Cast<Model>())
            {
                <div class="option" data-value="@modal">@modal</div>
            }
        </div>
        <input type="hidden" asp-for="model" id="model" />
    </div>

    <div class="form-group">
        <label asp-for="boja" class="control-label fs-4 mb-2">Boja</label>
        <div id="boja-container" class="options-container mb-2">
            @foreach (var boja in Enum.GetValues(typeof(Boja)).Cast<Boja>())
            {
                @if(boja == Boja.SunfireZuta)
                {
                    <div class="option" data-value="@boja">Sunfire Žuta</div>
                }
                @if (boja == Boja.BonsaiZelena)
                {
                    <div class="option" data-value="@boja">Bonsai Zelena</div>
                }
                @if(boja == Boja.BosanskaPlava)
                {
                    <div class="option" data-value="@boja">Bosanska Plava</div>
                }
                @if(boja == Boja.DracCrvena)
                {
                    <div class="option" data-value="@boja">Drač Crvena</div>
                }
                @if(boja == Boja.MontenegroCrna)
                {
                    <div class="option" data-value="@boja">Montenegro Crna</div>
                }
                @if (boja == Boja.ElegantnoBijela)
                {
                    <div class="option" data-value="@boja">Elegantno Bijela</div>
                }
            }
        </div>
        <input type="hidden" asp-for="boja" id="boja" />
    </div>

    <div class="form-group">
        <label asp-for="felge" class="control-label fs-4 mb-2">Felge</label>
        <div id="felge-container" class="options-container mb-2">
            @foreach (var felge in Enum.GetValues(typeof(Felge)).Cast<Felge>())
            {
                <div class="option" data-value="@felge">@felge</div>
            }
        </div>
        <input type="hidden" asp-for="felge" id="felge" />
    </div>

    <div class="form-group">
        <label asp-for="vrsta_interijera" class="control-label fs-4 mb-2">Vrsta Interijera</label>
        <div id="vrsta_interijera-container" class="options-container mb-2">
            @foreach (var vrstaInterijera in Enum.GetValues(typeof(VrstaInterijera)).Cast<VrstaInterijera>())
            {
                <div class="option" data-value="@vrstaInterijera">@vrstaInterijera</div>
            }
        </div>
        <input type="hidden" asp-for="vrsta_interijera" id="vrsta_interijera" />
    </div>

    <div class="form-group">
        <label asp-for="svjetla" class="control-label fs-4 mb-2">Svjetla</label>
        <div id="svjetla-container" class="options-container mb-2">
            @foreach (var svjetla in Enum.GetValues(typeof(Svjetla)).Cast<Svjetla>())
            {
                <div class="option" data-value="@svjetla">@svjetla</div>
            }
        </div>
        <input type="hidden" asp-for="svjetla" id="svjetla" />
    </div>

    <div class="form-group">
        <label asp-for="motor" class="control-label fs-4 mb-2">Motor</label>
        <div id="motor-container" class="options-container mb-2">
            @foreach (var motor in Enum.GetValues(typeof(Motor)).Cast<Motor>())
            {
                <div class="option" data-value="@motor">@motor</div>
            }
        </div>
        <input type="hidden" asp-for="motor" id="motor" />
    </div>
    <div class="w-100 d-flex justify-content-end">
        <div class="form-group"> 
            <label class="control-label fs-4 mb-2 ">Cijena: </label>
            <span id="price" class="control-label fs-4 mb-2">@Model.cijena</span>
        </div>
    </div>
    <div class="w-100 d-flex justify-content-end">
        <button id="save-button" type="submit" class="btn btn-dark">Napravi konfiguraciju</button>
    </div>
</form>

@section Scripts {
    <script>
        function updatePrice() {
            var model = document.getElementById("model").value;
            var boja = document.getElementById("boja").value;
            var felge = document.getElementById("felge").value;
            var vrsta_interijera = document.getElementById("vrsta_interijera").value;
            var svjetla = document.getElementById("svjetla").value;
            var motor = document.getElementById("motor").value;

            var data = {
                model: model,
                boja: boja,
                felge: felge,
                vrsta_interijera: vrsta_interijera,
                svjetla: svjetla,
                motor: motor
            };

            // Debug: Log data being sent
            console.log('Sending data:', data);

            fetch('@Url.Action("GetPrice", "Konfiguracija")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Received data:', data);
                    document.getElementById("price").innerText = data.price;
                })
                .catch(error => console.error('There was a problem with the fetch operation:', error));
        }

        document.querySelectorAll(".option").forEach(option => {
            option.addEventListener("click", function () {
                var container = option.parentElement;
                // Deselect all options in the same container
                container.querySelectorAll(".option").forEach(opt => opt.classList.remove("selected"));
                // Select the clicked option
                option.classList.add("selected");
                // Update the hidden input value
                var input = container.id.replace("-container", "");
                document.getElementById(input).value = option.getAttribute("data-value");
                // Update the price
                updatePrice();
            });
        });
        document.addEventListener("DOMContentLoaded", function () {
            var saveButton = document.getElementById("save-button");

            // Disable save button initially
            saveButton.disabled = true;

            document.querySelectorAll(".option").forEach(option => {
                option.addEventListener("click", function () {
                    var container = option.parentElement;
                    container.querySelectorAll(".option").forEach(opt => opt.classList.remove("selected"));
                    option.classList.add("selected");
                    var input = container.id.replace("-container", "");
                    document.getElementById(input).value = option.getAttribute("data-value");

                    // Check if all options are selected
                    var allOptionsSelected = Array.from(document.querySelectorAll(".options-container")).every(container => {
                        return container.querySelector(".selected") !== null;
                    });

                    // Enable save button if all options are selected
                    saveButton.disabled = !allOptionsSelected;

                    updatePrice();
                });
            });
        });
    </script>

    <style>
        .options-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .option {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            cursor: pointer;
            user-select: none;
            width: 10em;
            text-align: center;
            box-shadow: 0px 2px 4px 0px rgba(0,0,0,0.57);
        }

        .option.selected {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }
    </style>
}
